from flask import Flask, jsonify, request
import requests
from collections import deque
import threading

app = Flask(_name_)

WINDOW_SIZE = 10
numbers_window = deque(maxlen=WINDOW_SIZE)
lock = threading.Lock()

def fetch_numbers_from_api(numberid):
    try:
        response = requests.get(f'http://thirdpartyserver/api/{numberid}', timeout=0.5)
        response.raise_for_status()
        numbers = response.json().get('numbers', [])
        return numbers
    except (requests.exceptions.RequestException, ValueError):
        return []

def calculate_average(numbers):
    if not numbers:
        return 0.0
    return sum(numbers) / len(numbers)

@app.route('/numbers/<numberid>', methods=['GET'])
def get_numbers(numberid):
    if numberid not in {'p', 'f', 'e', 'r'}:
        return jsonify({"error": "Invalid number ID"}), 400
    
    with lock:
        window_prev_state = list(numbers_window)
        
        new_numbers = fetch_numbers_from_api(numberid)
        for number in new_numbers:
            if number not in numbers_window:
                numbers_window.append(number)
        
        window_curr_state = list(numbers_window)
        average = calculate_average(numbers_window)
    
    response = {
        "windowPrevState": window_prev_state,
        "windowCurrState": window_curr_state,
        "numbers": new_numbers,
        "avg": round(average, 2)
    }
    
    return jsonify(response)

if _name_ == '_main_':
    app.run(port=9876)
